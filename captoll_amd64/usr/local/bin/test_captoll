import unittest
from unittest.mock import patch
import captoll

class TestMain(unittest.TestCase):
    @patch('captoll.tkinter.Tk')
    @patch('captoll.tkinter.ttk.Frame')
    @patch('captoll.tkinter.ttk.Combobox')
    @patch('captoll.tkinter.ttk.Entry')
    @patch('captoll.tkinter.ttk.Button')
    @patch('captoll.messagebox.showerror')
    @patch('captoll.start_capture')
    @patch('captoll.scan_networks')
    @patch('captoll.get_wireless_interface')
    def test_main(self, mock_get_wireless_interface, mock_scan_networks, mock_start_capture, mock_showerror, mock_button, mock_entry, mock_combobox, mock_frame, mock_tk):
        # Mock the necessary dependencies
        mock_get_wireless_interface.return_value = 'wlan0'
        mock_scan_networks.return_value = [
            {'ESSID': 'Network1', 'BSSID': '00:11:22:33:44:55', 'Channel': '1'},
            {'ESSID': 'Network2', 'BSSID': '66:77:88:99:AA:BB', 'Channel': '6'}
        ]
        mock_combobox.return_value.get.return_value = 'Network1'
        mock_entry.return_value.get.return_value = 'output_file'

        # Call the main function
        captoll.main()

        # Assert that the necessary functions were called with the expected arguments
        mock_get_wireless_interface.assert_called_once()
        mock_scan_networks.assert_called_once_with('wlan0')
        mock_combobox.assert_called_once_with(mock_frame.return_value, textvariable=mock.ANY, state='readonly')
        mock_entry.assert_called_once_with(mock_frame.return_value, textvariable=mock.ANY)
        mock_button.assert_called_once_with(mock_frame.return_value, text='Iniciar Captura', command=mock.ANY)
        mock_showerror.assert_not_called()
        mock_start_capture.assert_called_once_with('wlan0', '00:11:22:33:44:55', '1', 'output_file')

if __name__ == '__main__':
    unittest.main()